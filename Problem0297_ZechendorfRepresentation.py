# -*- coding: utf-8 -*-
"""
Zeckendorf Representation
Problem 297
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.
Such a sum is called the Zeckendorf representation of the number.

For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.
Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.
Also, for 0<n<106, ∑ z(n) = 7894453.

Find ∑ z(n) for 0<n<1017.


Answer:
2252639041804718029
Completed on Thu, 22 Aug 2013, 10:55
"""


# lst   : is the Zeckendorf Series
# fold  : is the number of entries between Z. Series
# speed up would be calculating the sum series which
# is required.
# basically 1,2,5,10,20,38

a=1
b=2
c=3
lst=[a,b]
while c<10**17:
    c=a+b
    lst.append(c)
    a=b
    b=c
lst.reverse()

a=1
b=1
c=2
fold=[a,b]
while c<10**17:
    c=a+b
    fold.append(c)
    a=b
    b=c


# just the actual count of a the numbers in a z. rep.

def z(x):
    global lst
    count=0
    a=0
    print x,":",
    while x!=0:
        if lst[a]<=x:
            x-=lst[a]
            print lst[a],
            
            count+=1
        a+=1
    print
    return count 
            
    
 
    
def doit(x=10**17,grandtotal=0):
    global fold
    global extra
    backcount=0
    a=0
    h=[]
    total=0
    while sum(fold[:a+1])<=x:
        if a>1:
            backcount=sum(h[:-1])
        total=fold[a]+backcount
        h.append(total)
        a+=1
        grandtotal+=total
    r=x-sum(fold[:a])
    #print "x:",x," :",sum(fold[:a]),"...",r,grandtotal
    if r==0:
        return grandtotal
    if r==1:
        return grandtotal+1
    else:
        grandtotal+=r
    return doit(r-1,grandtotal)

 
print doit(10**17-1)            
    
